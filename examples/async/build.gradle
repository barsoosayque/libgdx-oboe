plugins {
    id "org.jetbrains.kotlin.android" version "$kotlinVersion"
}

apply plugin: "com.android.application"

configurations { natives }

dependencies {
    implementation project(":library")
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation group: 'io.github.libktx', name: 'ktx-scene2d', version: "$ktxVersion"
    implementation group: 'io.github.libktx', name: 'ktx-actors', version: "$ktxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
}

//noinspection GroovyAssignabilityCheck
android {
    buildToolsVersion androidBuildToolsVersion
    compileSdkVersion androidSdkVersion
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['../assets']
            jniLibs.srcDirs = ['libs']
        }
    }
    defaultConfig {
        applicationId "barsoosayque.libgdxoboe.async"
        minSdkVersion 16
        targetSdkVersion androidSdkVersion
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

task cleanNatives {
    file("libs/armeabi-v7a/").deleteDir()
    file("libs/arm64-v8a/").deleteDir()
    file("libs/x86_64/").deleteDir()
    file("libs/x86/").deleteDir()
}

tasks.whenTaskAdded { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
    if (packageTask.name.contains("clean")) {
        packageTask.dependsOn 'cleanNatives'
    }
}
